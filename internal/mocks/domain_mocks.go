// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/hossein1376/spallet/pkg/domain"
	"github.com/hossein1376/spallet/pkg/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGateway creates a new instance of MockGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGateway {
	mock := &MockGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGateway is an autogenerated mock type for the Gateway type
type MockGateway struct {
	mock.Mock
}

type MockGateway_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGateway) EXPECT() *MockGateway_Expecter {
	return &MockGateway_Expecter{mock: &_m.Mock}
}

// Process provides a mock function for the type MockGateway
func (_mock *MockGateway) Process(ctx context.Context, refID string) error {
	ret := _mock.Called(ctx, refID)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, refID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGateway_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockGateway_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
//   - refID string
func (_e *MockGateway_Expecter) Process(ctx interface{}, refID interface{}) *MockGateway_Process_Call {
	return &MockGateway_Process_Call{Call: _e.mock.On("Process", ctx, refID)}
}

func (_c *MockGateway_Process_Call) Run(run func(ctx context.Context, refID string)) *MockGateway_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGateway_Process_Call) Return(err error) *MockGateway_Process_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGateway_Process_Call) RunAndReturn(run func(ctx context.Context, refID string) error) *MockGateway_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPool creates a new instance of MockPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPool {
	mock := &MockPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPool is an autogenerated mock type for the Pool type
type MockPool struct {
	mock.Mock
}

type MockPool_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPool) EXPECT() *MockPool_Expecter {
	return &MockPool_Expecter{mock: &_m.Mock}
}

// Query provides a mock function for the type MockPool
func (_mock *MockPool) Query(ctx context.Context, f domain.QueryFunc) error {
	ret := _mock.Called(ctx, f)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.QueryFunc) error); ok {
		r0 = returnFunc(ctx, f)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPool_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockPool_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - f domain.QueryFunc
func (_e *MockPool_Expecter) Query(ctx interface{}, f interface{}) *MockPool_Query_Call {
	return &MockPool_Query_Call{Call: _e.mock.On("Query", ctx, f)}
}

func (_c *MockPool_Query_Call) Run(run func(ctx context.Context, f domain.QueryFunc)) *MockPool_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.QueryFunc
		if args[1] != nil {
			arg1 = args[1].(domain.QueryFunc)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPool_Query_Call) Return(err error) *MockPool_Query_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPool_Query_Call) RunAndReturn(run func(ctx context.Context, f domain.QueryFunc) error) *MockPool_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionsRepository creates a new instance of MockTransactionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionsRepository {
	mock := &MockTransactionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactionsRepository is an autogenerated mock type for the TransactionsRepository type
type MockTransactionsRepository struct {
	mock.Mock
}

type MockTransactionsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionsRepository) EXPECT() *MockTransactionsRepository_Expecter {
	return &MockTransactionsRepository_Expecter{mock: &_m.Mock}
}

// ForUpdate provides a mock function for the type MockTransactionsRepository
func (_mock *MockTransactionsRepository) ForUpdate(ctx context.Context, id model.TxID) (model.Transaction, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ForUpdate")
	}

	var r0 model.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.TxID) (model.Transaction, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.TxID) model.Transaction); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Transaction)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.TxID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionsRepository_ForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForUpdate'
type MockTransactionsRepository_ForUpdate_Call struct {
	*mock.Call
}

// ForUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - id model.TxID
func (_e *MockTransactionsRepository_Expecter) ForUpdate(ctx interface{}, id interface{}) *MockTransactionsRepository_ForUpdate_Call {
	return &MockTransactionsRepository_ForUpdate_Call{Call: _e.mock.On("ForUpdate", ctx, id)}
}

func (_c *MockTransactionsRepository_ForUpdate_Call) Run(run func(ctx context.Context, id model.TxID)) *MockTransactionsRepository_ForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.TxID
		if args[1] != nil {
			arg1 = args[1].(model.TxID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionsRepository_ForUpdate_Call) Return(transaction model.Transaction, err error) *MockTransactionsRepository_ForUpdate_Call {
	_c.Call.Return(transaction, err)
	return _c
}

func (_c *MockTransactionsRepository_ForUpdate_Call) RunAndReturn(run func(ctx context.Context, id model.TxID) (model.Transaction, error)) *MockTransactionsRepository_ForUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockTransactionsRepository
func (_mock *MockTransactionsRepository) Insert(ctx context.Context, userID model.UserID, amount int64, txType model.TxType, opts model.InsertTxOption) (model.TxID, error) {
	ret := _mock.Called(ctx, userID, amount, txType, opts)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 model.TxID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, int64, model.TxType, model.InsertTxOption) (model.TxID, error)); ok {
		return returnFunc(ctx, userID, amount, txType, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, int64, model.TxType, model.InsertTxOption) model.TxID); ok {
		r0 = returnFunc(ctx, userID, amount, txType, opts)
	} else {
		r0 = ret.Get(0).(model.TxID)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserID, int64, model.TxType, model.InsertTxOption) error); ok {
		r1 = returnFunc(ctx, userID, amount, txType, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionsRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockTransactionsRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - amount int64
//   - txType model.TxType
//   - opts model.InsertTxOption
func (_e *MockTransactionsRepository_Expecter) Insert(ctx interface{}, userID interface{}, amount interface{}, txType interface{}, opts interface{}) *MockTransactionsRepository_Insert_Call {
	return &MockTransactionsRepository_Insert_Call{Call: _e.mock.On("Insert", ctx, userID, amount, txType, opts)}
}

func (_c *MockTransactionsRepository_Insert_Call) Run(run func(ctx context.Context, userID model.UserID, amount int64, txType model.TxType, opts model.InsertTxOption)) *MockTransactionsRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		var arg3 model.TxType
		if args[3] != nil {
			arg3 = args[3].(model.TxType)
		}
		var arg4 model.InsertTxOption
		if args[4] != nil {
			arg4 = args[4].(model.InsertTxOption)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockTransactionsRepository_Insert_Call) Return(txID model.TxID, err error) *MockTransactionsRepository_Insert_Call {
	_c.Call.Return(txID, err)
	return _c
}

func (_c *MockTransactionsRepository_Insert_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, amount int64, txType model.TxType, opts model.InsertTxOption) (model.TxID, error)) *MockTransactionsRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockTransactionsRepository
func (_mock *MockTransactionsRepository) List(ctx context.Context, userID model.UserID, count int64, threshold int64) ([]model.Transaction, error) {
	ret := _mock.Called(ctx, userID, count, threshold)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.Transaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, int64, int64) ([]model.Transaction, error)); ok {
		return returnFunc(ctx, userID, count, threshold)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID, int64, int64) []model.Transaction); ok {
		r0 = returnFunc(ctx, userID, count, threshold)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserID, int64, int64) error); ok {
		r1 = returnFunc(ctx, userID, count, threshold)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTransactionsRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTransactionsRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
//   - count int64
//   - threshold int64
func (_e *MockTransactionsRepository_Expecter) List(ctx interface{}, userID interface{}, count interface{}, threshold interface{}) *MockTransactionsRepository_List_Call {
	return &MockTransactionsRepository_List_Call{Call: _e.mock.On("List", ctx, userID, count, threshold)}
}

func (_c *MockTransactionsRepository_List_Call) Run(run func(ctx context.Context, userID model.UserID, count int64, threshold int64)) *MockTransactionsRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		var arg3 int64
		if args[3] != nil {
			arg3 = args[3].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTransactionsRepository_List_Call) Return(transactions []model.Transaction, err error) *MockTransactionsRepository_List_Call {
	_c.Call.Return(transactions, err)
	return _c
}

func (_c *MockTransactionsRepository_List_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID, count int64, threshold int64) ([]model.Transaction, error)) *MockTransactionsRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// RefundPending provides a mock function for the type MockTransactionsRepository
func (_mock *MockTransactionsRepository) RefundPending(ctx context.Context, id *model.TxID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RefundPending")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.TxID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionsRepository_RefundPending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefundPending'
type MockTransactionsRepository_RefundPending_Call struct {
	*mock.Call
}

// RefundPending is a helper method to define mock.On call
//   - ctx context.Context
//   - id *model.TxID
func (_e *MockTransactionsRepository_Expecter) RefundPending(ctx interface{}, id interface{}) *MockTransactionsRepository_RefundPending_Call {
	return &MockTransactionsRepository_RefundPending_Call{Call: _e.mock.On("RefundPending", ctx, id)}
}

func (_c *MockTransactionsRepository_RefundPending_Call) Run(run func(ctx context.Context, id *model.TxID)) *MockTransactionsRepository_RefundPending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.TxID
		if args[1] != nil {
			arg1 = args[1].(*model.TxID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTransactionsRepository_RefundPending_Call) Return(err error) *MockTransactionsRepository_RefundPending_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionsRepository_RefundPending_Call) RunAndReturn(run func(ctx context.Context, id *model.TxID) error) *MockTransactionsRepository_RefundPending_Call {
	_c.Call.Return(run)
	return _c
}

// SetStaus provides a mock function for the type MockTransactionsRepository
func (_mock *MockTransactionsRepository) SetStaus(ctx context.Context, id model.TxID, status model.TxStatus, now time.Time) error {
	ret := _mock.Called(ctx, id, status, now)

	if len(ret) == 0 {
		panic("no return value specified for SetStaus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.TxID, model.TxStatus, time.Time) error); ok {
		r0 = returnFunc(ctx, id, status, now)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionsRepository_SetStaus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStaus'
type MockTransactionsRepository_SetStaus_Call struct {
	*mock.Call
}

// SetStaus is a helper method to define mock.On call
//   - ctx context.Context
//   - id model.TxID
//   - status model.TxStatus
//   - now time.Time
func (_e *MockTransactionsRepository_Expecter) SetStaus(ctx interface{}, id interface{}, status interface{}, now interface{}) *MockTransactionsRepository_SetStaus_Call {
	return &MockTransactionsRepository_SetStaus_Call{Call: _e.mock.On("SetStaus", ctx, id, status, now)}
}

func (_c *MockTransactionsRepository_SetStaus_Call) Run(run func(ctx context.Context, id model.TxID, status model.TxStatus, now time.Time)) *MockTransactionsRepository_SetStaus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.TxID
		if args[1] != nil {
			arg1 = args[1].(model.TxID)
		}
		var arg2 model.TxStatus
		if args[2] != nil {
			arg2 = args[2].(model.TxStatus)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockTransactionsRepository_SetStaus_Call) Return(err error) *MockTransactionsRepository_SetStaus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionsRepository_SetStaus_Call) RunAndReturn(run func(ctx context.Context, id model.TxID, status model.TxStatus, now time.Time) error) *MockTransactionsRepository_SetStaus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBalanceRepository creates a new instance of MockBalanceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBalanceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBalanceRepository {
	mock := &MockBalanceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBalanceRepository is an autogenerated mock type for the BalanceRepository type
type MockBalanceRepository struct {
	mock.Mock
}

type MockBalanceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBalanceRepository) EXPECT() *MockBalanceRepository_Expecter {
	return &MockBalanceRepository_Expecter{mock: &_m.Mock}
}

// Calculate provides a mock function for the type MockBalanceRepository
func (_mock *MockBalanceRepository) Calculate(ctx context.Context, userID model.UserID) (model.Balance, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Calculate")
	}

	var r0 model.Balance
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID) (model.Balance, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID) model.Balance); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.Balance)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBalanceRepository_Calculate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Calculate'
type MockBalanceRepository_Calculate_Call struct {
	*mock.Call
}

// Calculate is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
func (_e *MockBalanceRepository_Expecter) Calculate(ctx interface{}, userID interface{}) *MockBalanceRepository_Calculate_Call {
	return &MockBalanceRepository_Calculate_Call{Call: _e.mock.On("Calculate", ctx, userID)}
}

func (_c *MockBalanceRepository_Calculate_Call) Run(run func(ctx context.Context, userID model.UserID)) *MockBalanceRepository_Calculate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBalanceRepository_Calculate_Call) Return(balance model.Balance, err error) *MockBalanceRepository_Calculate_Call {
	_c.Call.Return(balance, err)
	return _c
}

func (_c *MockBalanceRepository_Calculate_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID) (model.Balance, error)) *MockBalanceRepository_Calculate_Call {
	_c.Call.Return(run)
	return _c
}

// InsertZero provides a mock function for the type MockBalanceRepository
func (_mock *MockBalanceRepository) InsertZero(ctx context.Context, userID model.UserID) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for InsertZero")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserID) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBalanceRepository_InsertZero_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertZero'
type MockBalanceRepository_InsertZero_Call struct {
	*mock.Call
}

// InsertZero is a helper method to define mock.On call
//   - ctx context.Context
//   - userID model.UserID
func (_e *MockBalanceRepository_Expecter) InsertZero(ctx interface{}, userID interface{}) *MockBalanceRepository_InsertZero_Call {
	return &MockBalanceRepository_InsertZero_Call{Call: _e.mock.On("InsertZero", ctx, userID)}
}

func (_c *MockBalanceRepository_InsertZero_Call) Run(run func(ctx context.Context, userID model.UserID)) *MockBalanceRepository_InsertZero_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserID
		if args[1] != nil {
			arg1 = args[1].(model.UserID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBalanceRepository_InsertZero_Call) Return(err error) *MockBalanceRepository_InsertZero_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBalanceRepository_InsertZero_Call) RunAndReturn(run func(ctx context.Context, userID model.UserID) error) *MockBalanceRepository_InsertZero_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersRepository creates a new instance of MockUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersRepository {
	mock := &MockUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsersRepository is an autogenerated mock type for the UsersRepository type
type MockUsersRepository struct {
	mock.Mock
}

type MockUsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersRepository) EXPECT() *MockUsersRepository_Expecter {
	return &MockUsersRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUsersRepository
func (_mock *MockUsersRepository) Create(ctx context.Context, username string) (*model.User, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsersRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUsersRepository_Expecter) Create(ctx interface{}, username interface{}) *MockUsersRepository_Create_Call {
	return &MockUsersRepository_Create_Call{Call: _e.mock.On("Create", ctx, username)}
}

func (_c *MockUsersRepository_Create_Call) Run(run func(ctx context.Context, username string)) *MockUsersRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersRepository_Create_Call) Return(user *model.User, err error) *MockUsersRepository_Create_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsersRepository_Create_Call) RunAndReturn(run func(ctx context.Context, username string) (*model.User, error)) *MockUsersRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGenerator creates a new instance of MockGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenerator {
	mock := &MockGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGenerator is an autogenerated mock type for the Generator type
type MockGenerator struct {
	mock.Mock
}

type MockGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenerator) EXPECT() *MockGenerator_Expecter {
	return &MockGenerator_Expecter{mock: &_m.Mock}
}

// NewUUID provides a mock function for the type MockGenerator
func (_mock *MockGenerator) NewUUID() uuid.UUID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewUUID")
	}

	var r0 uuid.UUID
	if returnFunc, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	return r0
}

// MockGenerator_NewUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewUUID'
type MockGenerator_NewUUID_Call struct {
	*mock.Call
}

// NewUUID is a helper method to define mock.On call
func (_e *MockGenerator_Expecter) NewUUID() *MockGenerator_NewUUID_Call {
	return &MockGenerator_NewUUID_Call{Call: _e.mock.On("NewUUID")}
}

func (_c *MockGenerator_NewUUID_Call) Run(run func()) *MockGenerator_NewUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGenerator_NewUUID_Call) Return(uUID uuid.UUID) *MockGenerator_NewUUID_Call {
	_c.Call.Return(uUID)
	return _c
}

func (_c *MockGenerator_NewUUID_Call) RunAndReturn(run func() uuid.UUID) *MockGenerator_NewUUID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorker creates a new instance of MockWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorker {
	mock := &MockWorker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWorker is an autogenerated mock type for the Worker type
type MockWorker struct {
	mock.Mock
}

type MockWorker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorker) EXPECT() *MockWorker_Expecter {
	return &MockWorker_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockWorker
func (_mock *MockWorker) Add(ctx context.Context, id string, job func(context.Context) error, fallback func(context.Context) error) error {
	ret := _mock.Called(ctx, id, job, fallback)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, func(context.Context) error, func(context.Context) error) error); ok {
		r0 = returnFunc(ctx, id, job, fallback)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWorker_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockWorker_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - job func(context.Context) error
//   - fallback func(context.Context) error
func (_e *MockWorker_Expecter) Add(ctx interface{}, id interface{}, job interface{}, fallback interface{}) *MockWorker_Add_Call {
	return &MockWorker_Add_Call{Call: _e.mock.On("Add", ctx, id, job, fallback)}
}

func (_c *MockWorker_Add_Call) Run(run func(ctx context.Context, id string, job func(context.Context) error, fallback func(context.Context) error)) *MockWorker_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 func(context.Context) error
		if args[2] != nil {
			arg2 = args[2].(func(context.Context) error)
		}
		var arg3 func(context.Context) error
		if args[3] != nil {
			arg3 = args[3].(func(context.Context) error)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockWorker_Add_Call) Return(err error) *MockWorker_Add_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWorker_Add_Call) RunAndReturn(run func(ctx context.Context, id string, job func(context.Context) error, fallback func(context.Context) error) error) *MockWorker_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockWorker
func (_mock *MockWorker) Run() {
	_mock.Called()
	return
}

// MockWorker_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockWorker_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockWorker_Expecter) Run() *MockWorker_Run_Call {
	return &MockWorker_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockWorker_Run_Call) Run(run func()) *MockWorker_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorker_Run_Call) Return() *MockWorker_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWorker_Run_Call) RunAndReturn(run func()) *MockWorker_Run_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function for the type MockWorker
func (_mock *MockWorker) Stop(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWorker_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockWorker_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWorker_Expecter) Stop(ctx interface{}) *MockWorker_Stop_Call {
	return &MockWorker_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockWorker_Stop_Call) Run(run func(ctx context.Context)) *MockWorker_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWorker_Stop_Call) Return(err error) *MockWorker_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWorker_Stop_Call) RunAndReturn(run func(ctx context.Context) error) *MockWorker_Stop_Call {
	_c.Call.Return(run)
	return _c
}
